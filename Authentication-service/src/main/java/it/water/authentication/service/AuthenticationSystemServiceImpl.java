package it.water.authentication.service;

import it.water.authentication.api.AuthenticationSystemApi;
import it.water.authentication.api.options.AuthenticationOption;
import it.water.core.api.registry.ComponentRegistry;
import it.water.core.api.security.Authenticable;
import it.water.core.api.security.AuthenticationProvider;
import it.water.core.interceptors.annotations.FrameworkComponent;
import it.water.core.interceptors.annotations.Inject;
import it.water.core.permission.exceptions.UnauthorizedException;
import it.water.core.service.BaseSystemServiceImpl;
import it.water.service.rest.api.security.jwt.JwtTokenService;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

import java.util.Collection;
import java.util.Optional;


/**
 * @Generated by Water Generator
 * System Service Api Class for Authentication entity.
 */
@Slf4j
@FrameworkComponent
public class AuthenticationSystemServiceImpl extends BaseSystemServiceImpl implements AuthenticationSystemApi {

    @Inject
    @Setter
    private ComponentRegistry componentRegistry;

    @Inject
    @Setter
    private AuthenticationOption authenticationOption;

    @Inject
    @Setter
    private JwtTokenService jwtTokenService;

    @Override
    public Authenticable login(String username, String password) {
        String issuerName = authenticationOption.getIssuerName();
        return login(username, password, issuerName);
    }

    @Override
    public Authenticable login(String username, String password, String issuerName) {
        Collection<AuthenticationProvider> authenticationProviders = componentRegistry.findComponents(AuthenticationProvider.class, null);
        Optional<AuthenticationProvider> authenticationProviderOpt = authenticationProviders.stream().filter(authenticationProvider -> authenticationProvider.issuersNames().contains(issuerName)).findFirst();
        if (authenticationProviderOpt.isEmpty())
            throw new UnauthorizedException("No authentication provider found for " + issuerName);
        return authenticationProviderOpt.get().login(username, password);
    }

    @Override
    public String generateToken(Authenticable authenticable) {
        return jwtTokenService.generateJwtToken(authenticable);
    }
}