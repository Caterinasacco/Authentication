package it.water.authentication.api.rest;

import com.fasterxml.jackson.annotation.JsonView;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import it.water.core.api.service.rest.FrameworkRestApi;
import it.water.core.api.service.rest.RestApi;
import it.water.core.api.service.rest.WaterJsonView;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import java.util.Map;

/**
 * @Generated by Water Generator
 * Rest Api Interface for Authentication entity.
 * This interfaces exposes all CRUD methods with default JAXRS annotations.
 */
@Path("/authentication")
@Api(produces = MediaType.APPLICATION_JSON, tags = "Authentication API")
@FrameworkRestApi
public interface AuthenticationRestApi extends RestApi {

    @POST
    @Path("/login")
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @ApiOperation(value = "/authentication/login", response = String.class, notes = "Login service for JWT Token", httpMethod = "POST", produces = "application/json", consumes = "application/x-www-form-urlencoded")
    @ApiResponses(value = {@ApiResponse(code = 401, message = "login failed"),
            @ApiResponse(code = 200, message = "login successed")})
    @JsonView(WaterJsonView.Public.class)
    Map<String,String> login(@FormParam("username") String username, @FormParam("password") String password);
}
